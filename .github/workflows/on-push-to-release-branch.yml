name: On push to release branch

on:
  push:
    branches: [release]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.release }}
    steps:
      - uses: actions/checkout@v2
      - name: Set release
        id: semrel
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allow-initial-development-versions: true
          force-bump-patch-version: true
          # For whatever reason, this silly tool won't let you do releases from branches
          #  other than the default branch unless you pass this flag, which doesn't seem
          #  to actually have anything to do with CI:
          # https://github.com/go-semantic-release/semantic-release/blob/master/cmd/semantic-release/main.go#L173-L194
          # https://github.com/go-semantic-release/condition-github/blob/4c8af3fc516151423fff2f77eb08bf7082570676/pkg/condition/github.go#L42-L44
          custom-arguments: '--no-ci'

      - name: Output release
        id: release
        run: echo "::set-output name=release::${{ steps.semrel.outputs.version }}"

  test_python_versions:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    env:
      TEST_AUTH_TOKEN: ${{ secrets.ALPHA_TEST_AUTH_TOKEN }}
      TEST_CACHE_NAME: python-integration-test-cache
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build package
        run: |
          pip install -r requirements.txt
          python -m build
          pip install -e .

      - name: Run tests
        run: python -m unittest discover -v

  publish_python:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [release, test_python_versions]
    env:
      TEST_AUTH_TOKEN: ${{ secrets.ALPHA_TEST_AUTH_TOKEN }}
      TEST_CACHE_NAME: python-integration-test-cache

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Build package
        run: |
          pip install -r requirements.txt
          python -m build

      - name: Run linters
        id: linters
        uses: ./.github/actions/linters

      - name: Flag Job Failure
        if: ${{ steps.linters.outputs.mypy == 'failure' || steps.linters.outputs.black == 'failure' || steps.linters.outputs.flake8 == 'failure' }}
        run: |
          echo "Job statuses"
          echo "============"
          echo "mypy: ${{ steps.linters.outputs.mypy }}"
          echo "black: ${{ steps.linters.outputs.black }}"
          echo "flake8: ${{ steps.linters.outputs.flake8 }}"
          exit 1

      - name: Prepare to publish
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build

      - name: Configure PyPI publish credentials
        run: |
          set -e
          set -x
          pushd package_index_setup
            ./pypi_setup.sh __token__ ${{ secrets.PYTHON_CUSTOMER_SDK_PYPI_TOKEN }} >> ~/.pypirc
          popd
        shell: bash

      - name: Build and publish package
        run: |
          set -e
          set -x
          export MOMENTO_SDK_VERSION="${{needs.release.outputs.version}}"
          if [ -z "$MOMENTO_SDK_VERSION"]
          then
            echo "Unable to determine SDK version!  Exiting!"
            exit 1
          fi
          echo "MOMENTO_SDK_VERSION=${MOMENTO_SDK_VERSION}"
          python setup.py sdist bdist_wheel
          python -m twine upload dist/* --config-file ~/.pypirc
        shell: bash
